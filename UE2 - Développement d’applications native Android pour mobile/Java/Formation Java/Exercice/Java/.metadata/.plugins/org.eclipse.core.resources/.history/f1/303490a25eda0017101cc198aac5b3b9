package fr.banque;

import java.util.ArrayList;
import java.util.List;


public class Client {
	private String nom;
	private String prenom;
	private int age;
	private int numero;
	
	private List<Compte> tabComptes;

	public Client() {
		this(-1, null, null, 0);
	}

	
	public Client(int unNumero, String unNom, String unPrenom, int unAge) {
		super();
		this.setNom(unNom);
		this.setPrenom(unPrenom);
		this.setAge(unAge);
		
		this.tabComptes = new ArrayList<Compte>();
		this.setNumero(unNumero);
	}

	
	public int getAge() {
		return this.age;
	}

	
	public String getNom() {
		return this.nom;
	}

	
	public String getPrenom() {
		return this.prenom;
	}

	
	public void setAge(int unAge) {
		this.age = unAge;
	}

	
	public void setNom(String unNom) {
		this.nom = unNom;
	}

	
	public final void setNumero(int unNumero) {
		this.numero = unNumero;
	}

	
	public final int getNumero() {
		return this.numero;
	}

	
	public void setPrenom(String unPrenom) {
		this.prenom = unPrenom;
	}

	
	public Compte[] getComptes() {
		return this.tabComptes.toArray(new Compte[this.tabComptes.size()]);
	}

	
	public void setComptes(Compte[] desComptes) {
		
		this.tabComptes.clear();
		for (Compte unCpt : desComptes) {
			
			if (unCpt != null) {
				this.ajouterCompte(unCpt);
			}
		}
	}

	
	public Compte getCompte(int unNumero) {
		for (Compte unCpt : this.tabComptes) {
			if (unCpt != null && unCpt.getNumero() == unNumero) {
				return unCpt;
			}
		}
		return null;
	}

	
	public void ajouterCompte(Compte unCompte) {
		this.tabComptes.add(unCompte);
	}

	/**
	 * Formatage du client sous forme de String utilisable directement par
	 * System.out.println(..);. <br/>
	 *
	 * La methode toString() est heritee de la classe java.lang.Object, elle est
	 * tres pratique quand on veut debuguer un programme. Elle est
	 * automatiquement appellee quand on fait de la concatenation entre chaines
	 * de characteres : "a"+12+"b"+monClient. <br/>
	 *
	 * @return une representation chainee de l'objet
	 */
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(this.getClass().getName());
		sb.append(" Nom: ");
		sb.append(this.getNom());
		sb.append(" Prenom: ");
		sb.append(this.getPrenom());
		sb.append(" Age: ");
		sb.append(this.getAge());
		sb.append("\n");
		sb.append(this.tabComptes);
		return sb.toString();
	}

	/**
	 * Indique si deux clients sont egaux. <br/>
	 *
	 * Deux clients sont egaux si ils ont le meme numero d'identification.
	 *
	 * @param obj
	 *            l'objet qui sera compare a this
	 * @return <code>true</code> si les deux sont egaux et <code>false</code>
	 *         sinon.
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		if (obj == this) {
			return true;
		}
		if (obj instanceof Client) {
			Client c = (Client) obj;
			return this.getNumero() == c.getNumero();
		}
		return false;
	}

	@Override
	public int hashCode() {
		return (this.getClass().getName() + "_" + this.getNumero()).hashCode();
	}
}